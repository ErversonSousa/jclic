/*
 * File    : ExportTaskDlg.java
 * Created : 24-nov-2015 16:37
 * By      : fbusquets
 *
 * JClic - Authoring and playing system for educational activities
 *
 * Copyright (C) 2000 - 2005 Francesc Busquets & Departament
 * d'Educacio de la Generalitat de Catalunya
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details (see the LICENSE file).
 */
package edu.xtec.jclic.project;

import edu.xtec.util.Messages;
import edu.xtec.util.Options;
import edu.xtec.util.ResourceBridge;
import java.awt.BorderLayout;
import java.awt.Component;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;

/**
 *
 * @author Francesc Busquets (fbusquets@xtec.cat)
 * @version 24.11.15
 */
public class ExportTaskDlg extends javax.swing.JPanel {

  ResourceBridge rb;
  Options options;

  /**
   * Creates new ExportTaskDlg
   */
  public ExportTaskDlg(ResourceBridge rb) {
    this.rb = rb;
    options = rb.getOptions();
    initComponents();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jScrollPane1 = new javax.swing.JScrollPane();
    logArea = new javax.swing.JTextArea();
    javax.swing.JPanel bottomPanel = new javax.swing.JPanel();
    copyBtn = new javax.swing.JButton();
    cancelBtn = new javax.swing.JButton();

    setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
    setLayout(new java.awt.BorderLayout(0, 10));

    logArea.setColumns(20);
    logArea.setRows(5);
    logArea.setMinimumSize(new java.awt.Dimension(223, 78));
    jScrollPane1.setViewportView(logArea);

    add(jScrollPane1, java.awt.BorderLayout.CENTER);

    bottomPanel.setLayout(new java.awt.BorderLayout());

    copyBtn.setText(options.getMsg("COPY"));
    copyBtn.setEnabled(false);
    copyBtn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        copyBtnActionPerformed(evt);
      }
    });
    bottomPanel.add(copyBtn, java.awt.BorderLayout.WEST);

    cancelBtn.setText(options.getMsg("CANCEL"));
    cancelBtn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cancelBtnActionPerformed(evt);
      }
    });
    bottomPanel.add(cancelBtn, java.awt.BorderLayout.EAST);

    add(bottomPanel, java.awt.BorderLayout.SOUTH);
  }// </editor-fold>//GEN-END:initComponents

  private void copyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyBtnActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_copyBtnActionPerformed

  private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed

    JDialog myDlg = (JDialog) javax.swing.SwingUtilities.getAncestorOfClass(JDialog.class, this);
    if (myDlg != null) {
      myDlg.dispose();
    }

  }//GEN-LAST:event_cancelBtnActionPerformed

  public static void doTask(ResourceBridge rb, Component parent, final String inputPath, final String outputPath, final boolean copyAll) {

    final Messages msg = rb.getOptions().getMessages();
    final ExportTaskDlg exportDlg = new ExportTaskDlg(rb);

    final PrintStream ps = new PrintStream(new ByteArrayOutputStream()) {
      public void println(String s) {
        exportDlg.logArea.append(s + "\n");
      }

      public void print(String s) {
        exportDlg.logArea.append(s);
      }
    };

    JDialog dlg = new JDialog(JOptionPane.getFrameForComponent(parent), true);
    dlg.setTitle(msg.get("export_project_exporting"));
    dlg.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    dlg.getContentPane().setLayout(new BorderLayout(10, 10));
    dlg.getContentPane().add(exportDlg, BorderLayout.CENTER);
    dlg.pack();
    dlg.setLocationRelativeTo(parent);
    dlg.setLocation((parent.getWidth() - dlg.getWidth()) / 2, (parent.getHeight() - dlg.getHeight()) / 2);

    edu.xtec.util.SwingWorker sw = new edu.xtec.util.SwingWorker() {

      @Override
      public Object construct() {
        try {
          if (!copyAll) {
            ps.println("Processing: " + inputPath);
            ProjectFileUtils pfu = new ProjectFileUtils(inputPath);
            pfu.normalizeFileNames(ps);
            pfu.avoidZipLinks(ps);
            pfu.saveTo(outputPath, ps);
          } else {
            ps.println("Processing al projects in: " + inputPath);

            ProjectFileUtils.processFolder(inputPath, outputPath, ps);
          }
        } catch (InterruptedException iex) {
          ps.println("Process was interrumpted!");
        } catch (Exception ex) {
          ps.println("ERROR processing ZIP file: " + ex.getMessage());
        }
        return null;
      }

      @Override
      public void finished() {
        exportDlg.cancelBtn.setText(msg.get("OK"));
      }
    };

    sw.start();

    dlg.setVisible(true);

  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton cancelBtn;
  private javax.swing.JButton copyBtn;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JTextArea logArea;
  // End of variables declaration//GEN-END:variables

}
