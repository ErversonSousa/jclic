/*
 * File    : ExportToJSDlg.java
 * Created : 23-nov-2015 16:37
 * By      : fbusquets
 *
 * JClic - Authoring and playing system for educational activities
 *
 * Copyright (C) 2000 - 2005 Francesc Busquets & Departament
 * d'Educacio de la Generalitat de Catalunya
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details (see the LICENSE file).
 */
package edu.xtec.jclic.project;

import edu.xtec.jclic.fileSystem.FileSystem;
import edu.xtec.jclic.misc.Utils;
import edu.xtec.util.Messages;
import edu.xtec.util.Options;
import edu.xtec.util.ResourceBridge;
import edu.xtec.util.SimpleFileFilter;
import edu.xtec.util.StrUtils;
import java.awt.Component;
import java.io.File;
import java.io.FilenameFilter;
import javax.swing.JFileChooser;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author Francesc Busquets (fbusquets@xtec.cat)
 * @version 13.08.09
 */
public class ExportToJSDlg extends javax.swing.JPanel {

  ResourceBridge rb;
  Options options;
  String inputFolder;
  String outputFolder;

  /**
   * Creates new form ExportToJSDlg
   */
  public ExportToJSDlg(ResourceBridge rb, String inputFolder) {
    this.rb = rb;
    options = rb.getOptions();
    this.inputFolder = inputFolder.replace('/', File.separatorChar);
    initComponents();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    exportLb = new javax.swing.JLabel();
    inputFolderLb = new javax.swing.JLabel();
    inputFolderText = new javax.swing.JTextField();
    inputFolderBtn = new javax.swing.JButton();
    spacer1 = new javax.swing.JLabel();
    outputFolderLb = new javax.swing.JLabel();
    outputFolderText = new javax.swing.JTextField();
    outputFolderBtn = new javax.swing.JButton();
    spacer2 = new javax.swing.JLabel();

    setLayout(new java.awt.GridBagLayout());

    exportLb.setText(options.getMsg("export_project_desc"));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(exportLb, gridBagConstraints);

    inputFolderLb.setLabelFor(inputFolderText);
    inputFolderLb.setText(options.getMsg("export_project_source_folder"));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(inputFolderLb, gridBagConstraints);

    inputFolderText.setToolTipText(options.getMsg("edit_new_project_folder_tooltip"));
    inputFolderText.setMinimumSize(new java.awt.Dimension(280, 21));
    inputFolderText.setPreferredSize(new java.awt.Dimension(280, 21));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(inputFolderText, gridBagConstraints);

    inputFolderBtn.setText(options.getMsg("edit_new_project_folder_browse"));
    inputFolderBtn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        inputFolderBtnActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(inputFolderBtn, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    add(spacer1, gridBagConstraints);

    outputFolderLb.setLabelFor(outputFolderText);
    outputFolderLb.setText(options.getMsg("export_project_output_folder"));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(outputFolderLb, gridBagConstraints);

    outputFolderText.setToolTipText(options.getMsg("edit_new_project_folder_tooltip"));
    outputFolderText.setMinimumSize(new java.awt.Dimension(280, 21));
    outputFolderText.setPreferredSize(new java.awt.Dimension(280, 21));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(outputFolderText, gridBagConstraints);

    outputFolderBtn.setText(options.getMsg("edit_new_project_folder_browse"));
    outputFolderBtn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        outputFolderBtnActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(outputFolderBtn, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    add(spacer2, gridBagConstraints);
  }// </editor-fold>//GEN-END:initComponents

  private JFileChooser chooser;

    private void inputFolderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputFolderBtnActionPerformed

      if (chooser == null) {
        chooser = new JFileChooser(inputFolder);
        chooser.setDialogType(JFileChooser.DIRECTORIES_ONLY);
      }
      if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
        inputFolder = chooser.getCurrentDirectory().getAbsolutePath();
        inputFolderText.setText(inputFolder);
      }

    }//GEN-LAST:event_inputFolderBtnActionPerformed

  private void outputFolderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputFolderBtnActionPerformed

    if (chooser == null) {
      chooser = new JFileChooser(outputFolder);
      chooser.setDialogType(JFileChooser.DIRECTORIES_ONLY);
    }
    if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
      outputFolder = chooser.getCurrentDirectory().getAbsolutePath();
      outputFolderText.setText(outputFolder);
    }

  }//GEN-LAST:event_outputFolderBtnActionPerformed

  public void fillData() {
    inputFolderText.setText(inputFolder == null ? "" : inputFolder);
    outputFolderText.setText(outputFolder == null ? "" : outputFolder);
  }

  public void getData() {
    inputFolder = StrUtils.nullableString(inputFolderText.getText());
    outputFolder = StrUtils.nullableString(outputFolderText.getText());
  }

  public static String[] prompt(ResourceBridge rb, Component parent, FileSystem baseFS) {
    String[] result = null;
    ExportToJSDlg exportDlg = new ExportToJSDlg(rb, baseFS.root);
    Messages msg = rb.getOptions().getMessages();
    exportDlg.fillData();
    while (result == null) {
      if (!msg.showInputDlg(parent, exportDlg, "export_project_title")) {
        break;
      }
      exportDlg.getData();
      if (exportDlg.inputFolder == null || exportDlg.outputFolder == null) {
        msg.showErrorWarning(parent, "export_project_err_empty", null);
      } else {
        try {
          boolean foldersOk = true;
          File inputFolderFile = new File(exportDlg.inputFolder);
          File outputFolderFile = new File(exportDlg.outputFolder);

          if (!inputFolderFile.exists()) {
            msg.showErrorWarning(parent, "export_project_err_sourceNotExists", null);
            foldersOk = false;
          } else if (outputFolderFile.exists() && outputFolderFile.isDirectory()) {
            FilenameFilter ff = ((SimpleFileFilter) Utils.getFileFilter(Utils.ALL_JCLIC_CLIC_FF, msg)).getFilenameFilter();
            if (outputFolderFile.list(ff).length > 0) {
              foldersOk = msg.showQuestionDlg(parent, "edit_new_project_warning_noEmptyFolder", null, "yn") == Messages.YES;
            }
          } else if (!outputFolderFile.mkdirs()) {
            msg.showErrorWarning(parent, "edit_new_project_err_folderCreation", null);
            foldersOk = false;
          }

          if (foldersOk) {
            result = new String[]{exportDlg.inputFolder, exportDlg.outputFolder};
          }
        } catch (Exception ex) {
          msg.showErrorWarning(parent, "ERROR", ex);
        }
      }
    }
    return result;
  }


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel exportLb;
  private javax.swing.JButton inputFolderBtn;
  private javax.swing.JLabel inputFolderLb;
  private javax.swing.JTextField inputFolderText;
  private javax.swing.JButton outputFolderBtn;
  private javax.swing.JLabel outputFolderLb;
  private javax.swing.JTextField outputFolderText;
  private javax.swing.JLabel spacer1;
  private javax.swing.JLabel spacer2;
  // End of variables declaration//GEN-END:variables

}
